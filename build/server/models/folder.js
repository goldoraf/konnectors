// Generated by CoffeeScript 1.11.1
var Folder, americano, async, log;

americano = require('cozydb');

async = require('async');

log = require('printit')({
  prefix: 'konnectors'
});

module.exports = Folder = americano.getModel('Folder', {
  path: String,
  name: String
});

Folder.prototype.getFullPath = function() {
  return this.path + "/" + this.name;
};

Folder.all = function(callback) {
  return Folder.request("byFullPath", function(err, folders) {
    if (err) {
      return callback(err);
    }
    return callback(null, folders);
  });
};

Folder.allPath = function(callback) {
  return Folder.all(function(err, folders) {
    if (err) {
      return callback(err);
    }
    folders = folders.map(function(folder) {
      return folder.getFullPath();
    });
    return callback(err, folders);
  });
};

Folder.isPresent = function(arg, callback) {
  var name, path;
  name = arg.name, path = arg.path;
  return Folder.request("byFullPath", {
    key: path + "/" + name
  }, function(err, folders) {
    if (err) {
      return callback(err);
    }
    return callback(null, (folders != null ? folders.length : void 0) > 0);
  });
};

Folder.createNewFolder = function(folder, callback) {
  return Folder.create(folder, function(err, newFolder) {
    var path;
    if (err) {
      return callback(err);
    }
    path = newFolder.path != null ? newFolder.path : '/';
    log.info("Folder " + path + "/" + newFolder.name + " successfully created.");
    return callback(null, newFolder);
  });
};

Folder.mkdir = function(arg, callback) {
  var name, path;
  name = arg.name, path = arg.path;
  if (name.length === 0) {
    return callback(null, {
      path: path
    });
  }
  return Folder.isPresent({
    name: name,
    path: path
  }, function(err, isPresent) {
    if (isPresent) {
      return callback(null, {
        name: name,
        path: path
      });
    } else {
      return Folder.createNewFolder({
        name: name,
        path: path
      }, callback);
    }
  });
};

Folder.mkdirp = function(path, callback) {
  var cleanPath, createFolder, folders;
  cleanPath = path.charAt(0) === '/' ? path.substring(1) : path;
  if (cleanPath.length === 0) {
    return callback(new Error('empty path'));
  }
  folders = cleanPath.split('/');
  createFolder = function(folder, callback) {
    var folderIndex;
    folderIndex = folders.indexOf(folder);
    return Folder.mkdir({
      name: folder,
      path: [''].concat(folders.slice(0, folderIndex)).join('/')
    }, callback);
  };
  return async.eachSeries(folders, createFolder, callback);
};
